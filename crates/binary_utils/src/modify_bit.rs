use crate::IsBitOn;

pub trait ModifyBit {
    fn turn_on_bit(&self, n: usize) -> Self;

    fn turn_off_bit(&self, n: usize) -> Self;

    fn modify_bit(&self, n: usize, is_on: bool) -> Self where Self: Sized {
        if is_on {
            self.turn_on_bit(n)
        } else {
            self.turn_off_bit(n)
        }
    }

    fn toggle_bit(&self, n: usize) -> Self where Self: Sized + IsBitOn {
        self.modify_bit(n, !self.is_bit_on(n))
    }
}


macro_rules! modify_bit_on_impl {
    ($($t:ty)+) => ($(
        impl ModifyBit for $t {
            fn turn_on_bit(&self, n: usize) -> Self {
                self | (1 << (n - 1))
            }

            fn turn_off_bit(&self, n: usize) -> Self {
                self & !(1 << (n - 1))
            }

        }
    )+)
}

modify_bit_on_impl! { u8 u16 u32 u64 }


#[cfg(test)]
mod tests {
    use super::*;


    // so it will be aligned
    const F: bool = false;
    const T: bool = true;

    #[test]
    fn test_modify_bit_on_u8() {
        let num: u8 = 0b00000000;

        assert_eq!(num.turn_on_bit(01), 0b00000001);
        assert_eq!(num.turn_on_bit(02), 0b00000010);
        assert_eq!(num.turn_on_bit(03), 0b00000100);
        assert_eq!(num.turn_on_bit(04), 0b00001000);
        assert_eq!(num.turn_on_bit(05), 0b00010000);
        assert_eq!(num.turn_on_bit(06), 0b00100000);
        assert_eq!(num.turn_on_bit(07), 0b01000000);
        assert_eq!(num.turn_on_bit(08), 0b10000000);

        let num: u8 = 0b11111111;

        assert_eq!(num.turn_off_bit(01), 0b11111110);
        assert_eq!(num.turn_off_bit(02), 0b11111101);
        assert_eq!(num.turn_off_bit(03), 0b11111011);
        assert_eq!(num.turn_off_bit(04), 0b11110111);
        assert_eq!(num.turn_off_bit(05), 0b11101111);
        assert_eq!(num.turn_off_bit(06), 0b11011111);
        assert_eq!(num.turn_off_bit(07), 0b10111111);
        assert_eq!(num.turn_off_bit(08), 0b01111111);

        let num: u8 = 0b10110010;

        assert_eq!(num.modify_bit(01, T), 0b10110011);
        assert_eq!(num.modify_bit(01, F), 0b10110010);

        assert_eq!(num.modify_bit(02, T), 0b10110010);
        assert_eq!(num.modify_bit(02, F), 0b10110000);

        assert_eq!(num.modify_bit(03, T), 0b10110110);
        assert_eq!(num.modify_bit(03, F), 0b10110010);

        assert_eq!(num.modify_bit(04, T), 0b10111010);
        assert_eq!(num.modify_bit(04, F), 0b10110010);

        assert_eq!(num.modify_bit(05, T), 0b10110010);
        assert_eq!(num.modify_bit(05, F), 0b10100010);

        assert_eq!(num.modify_bit(06, T), 0b10110010);
        assert_eq!(num.modify_bit(06, F), 0b10010010);

        assert_eq!(num.modify_bit(07, T), 0b11110010);
        assert_eq!(num.modify_bit(07, F), 0b10110010);

        assert_eq!(num.modify_bit(08, T), 0b10110010);
        assert_eq!(num.modify_bit(08, F), 0b00110010);
    }
    #[test]
    fn test_modify_bit_on_u16() {
        let num: u16 = 0b0000000000000000;

        assert_eq!(num.turn_on_bit(01), 0b0000000000000001);
        assert_eq!(num.turn_on_bit(02), 0b0000000000000010);
        assert_eq!(num.turn_on_bit(03), 0b0000000000000100);
        assert_eq!(num.turn_on_bit(04), 0b0000000000001000);
        assert_eq!(num.turn_on_bit(05), 0b0000000000010000);
        assert_eq!(num.turn_on_bit(06), 0b0000000000100000);
        assert_eq!(num.turn_on_bit(07), 0b0000000001000000);
        assert_eq!(num.turn_on_bit(08), 0b0000000010000000);
        assert_eq!(num.turn_on_bit(09), 0b0000000100000000);
        assert_eq!(num.turn_on_bit(10), 0b0000001000000000);
        assert_eq!(num.turn_on_bit(11), 0b0000010000000000);
        assert_eq!(num.turn_on_bit(12), 0b0000100000000000);
        assert_eq!(num.turn_on_bit(13), 0b0001000000000000);
        assert_eq!(num.turn_on_bit(14), 0b0010000000000000);
        assert_eq!(num.turn_on_bit(15), 0b0100000000000000);
        assert_eq!(num.turn_on_bit(16), 0b1000000000000000);

        let num: u16 = 0b1111111111111111;

        assert_eq!(num.turn_off_bit(01), 0b1111111111111110);
        assert_eq!(num.turn_off_bit(02), 0b1111111111111101);
        assert_eq!(num.turn_off_bit(03), 0b1111111111111011);
        assert_eq!(num.turn_off_bit(04), 0b1111111111110111);
        assert_eq!(num.turn_off_bit(05), 0b1111111111101111);
        assert_eq!(num.turn_off_bit(06), 0b1111111111011111);
        assert_eq!(num.turn_off_bit(07), 0b1111111110111111);
        assert_eq!(num.turn_off_bit(08), 0b1111111101111111);
        assert_eq!(num.turn_off_bit(09), 0b1111111011111111);
        assert_eq!(num.turn_off_bit(10), 0b1111110111111111);
        assert_eq!(num.turn_off_bit(11), 0b1111101111111111);
        assert_eq!(num.turn_off_bit(12), 0b1111011111111111);
        assert_eq!(num.turn_off_bit(13), 0b1110111111111111);
        assert_eq!(num.turn_off_bit(14), 0b1101111111111111);
        assert_eq!(num.turn_off_bit(15), 0b1011111111111111);
        assert_eq!(num.turn_off_bit(16), 0b0111111111111111);

        let num: u16 = 0b1001111001110000;

        assert_eq!(num.modify_bit(01, T), 0b1001111001110001);
        assert_eq!(num.modify_bit(01, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(02, T), 0b1001111001110010);
        assert_eq!(num.modify_bit(02, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(03, T), 0b1001111001110100);
        assert_eq!(num.modify_bit(03, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(04, T), 0b1001111001111000);
        assert_eq!(num.modify_bit(04, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(05, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(05, F), 0b1001111001100000);

        assert_eq!(num.modify_bit(06, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(06, F), 0b1001111001010000);

        assert_eq!(num.modify_bit(07, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(07, F), 0b1001111000110000);

        assert_eq!(num.modify_bit(08, T), 0b1001111011110000);
        assert_eq!(num.modify_bit(08, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(09, T), 0b1001111101110000);
        assert_eq!(num.modify_bit(09, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(10, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(10, F), 0b1001110001110000);

        assert_eq!(num.modify_bit(11, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(11, F), 0b1001101001110000);

        assert_eq!(num.modify_bit(12, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(12, F), 0b1001011001110000);

        assert_eq!(num.modify_bit(13, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(13, F), 0b1000111001110000);

        assert_eq!(num.modify_bit(14, T), 0b1011111001110000);
        assert_eq!(num.modify_bit(14, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(15, T), 0b1101111001110000);
        assert_eq!(num.modify_bit(15, F), 0b1001111001110000);

        assert_eq!(num.modify_bit(16, T), 0b1001111001110000);
        assert_eq!(num.modify_bit(16, F), 0b0001111001110000);
    }

    #[test]
    fn test_modify_bit_on_u32() {
        let num: u32 = 0b00000000000000000000000000000000;

        assert_eq!(num.turn_on_bit(01), 0b00000000000000000000000000000001);
        assert_eq!(num.turn_on_bit(02), 0b00000000000000000000000000000010);
        assert_eq!(num.turn_on_bit(03), 0b00000000000000000000000000000100);
        assert_eq!(num.turn_on_bit(04), 0b00000000000000000000000000001000);
        assert_eq!(num.turn_on_bit(05), 0b00000000000000000000000000010000);
        assert_eq!(num.turn_on_bit(06), 0b00000000000000000000000000100000);
        assert_eq!(num.turn_on_bit(07), 0b00000000000000000000000001000000);
        assert_eq!(num.turn_on_bit(08), 0b00000000000000000000000010000000);
        assert_eq!(num.turn_on_bit(09), 0b00000000000000000000000100000000);
        assert_eq!(num.turn_on_bit(10), 0b00000000000000000000001000000000);
        assert_eq!(num.turn_on_bit(11), 0b00000000000000000000010000000000);
        assert_eq!(num.turn_on_bit(12), 0b00000000000000000000100000000000);
        assert_eq!(num.turn_on_bit(13), 0b00000000000000000001000000000000);
        assert_eq!(num.turn_on_bit(14), 0b00000000000000000010000000000000);
        assert_eq!(num.turn_on_bit(15), 0b00000000000000000100000000000000);
        assert_eq!(num.turn_on_bit(16), 0b00000000000000001000000000000000);
        assert_eq!(num.turn_on_bit(17), 0b00000000000000010000000000000000);
        assert_eq!(num.turn_on_bit(18), 0b00000000000000100000000000000000);
        assert_eq!(num.turn_on_bit(19), 0b00000000000001000000000000000000);
        assert_eq!(num.turn_on_bit(20), 0b00000000000010000000000000000000);
        assert_eq!(num.turn_on_bit(21), 0b00000000000100000000000000000000);
        assert_eq!(num.turn_on_bit(22), 0b00000000001000000000000000000000);
        assert_eq!(num.turn_on_bit(23), 0b00000000010000000000000000000000);
        assert_eq!(num.turn_on_bit(24), 0b00000000100000000000000000000000);
        assert_eq!(num.turn_on_bit(25), 0b00000001000000000000000000000000);
        assert_eq!(num.turn_on_bit(26), 0b00000010000000000000000000000000);
        assert_eq!(num.turn_on_bit(27), 0b00000100000000000000000000000000);
        assert_eq!(num.turn_on_bit(28), 0b00001000000000000000000000000000);
        assert_eq!(num.turn_on_bit(29), 0b00010000000000000000000000000000);
        assert_eq!(num.turn_on_bit(30), 0b00100000000000000000000000000000);
        assert_eq!(num.turn_on_bit(31), 0b01000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(32), 0b10000000000000000000000000000000);

        let num: u32 = 0b11111111111111111111111111111111;

        assert_eq!(num.turn_off_bit(01), 0b11111111111111111111111111111110);
        assert_eq!(num.turn_off_bit(02), 0b11111111111111111111111111111101);
        assert_eq!(num.turn_off_bit(03), 0b11111111111111111111111111111011);
        assert_eq!(num.turn_off_bit(04), 0b11111111111111111111111111110111);
        assert_eq!(num.turn_off_bit(05), 0b11111111111111111111111111101111);
        assert_eq!(num.turn_off_bit(06), 0b11111111111111111111111111011111);
        assert_eq!(num.turn_off_bit(07), 0b11111111111111111111111110111111);
        assert_eq!(num.turn_off_bit(08), 0b11111111111111111111111101111111);
        assert_eq!(num.turn_off_bit(09), 0b11111111111111111111111011111111);
        assert_eq!(num.turn_off_bit(10), 0b11111111111111111111110111111111);
        assert_eq!(num.turn_off_bit(11), 0b11111111111111111111101111111111);
        assert_eq!(num.turn_off_bit(12), 0b11111111111111111111011111111111);
        assert_eq!(num.turn_off_bit(13), 0b11111111111111111110111111111111);
        assert_eq!(num.turn_off_bit(14), 0b11111111111111111101111111111111);
        assert_eq!(num.turn_off_bit(15), 0b11111111111111111011111111111111);
        assert_eq!(num.turn_off_bit(16), 0b11111111111111110111111111111111);
        assert_eq!(num.turn_off_bit(17), 0b11111111111111101111111111111111);
        assert_eq!(num.turn_off_bit(18), 0b11111111111111011111111111111111);
        assert_eq!(num.turn_off_bit(19), 0b11111111111110111111111111111111);
        assert_eq!(num.turn_off_bit(20), 0b11111111111101111111111111111111);
        assert_eq!(num.turn_off_bit(21), 0b11111111111011111111111111111111);
        assert_eq!(num.turn_off_bit(22), 0b11111111110111111111111111111111);
        assert_eq!(num.turn_off_bit(23), 0b11111111101111111111111111111111);
        assert_eq!(num.turn_off_bit(24), 0b11111111011111111111111111111111);
        assert_eq!(num.turn_off_bit(25), 0b11111110111111111111111111111111);
        assert_eq!(num.turn_off_bit(26), 0b11111101111111111111111111111111);
        assert_eq!(num.turn_off_bit(27), 0b11111011111111111111111111111111);
        assert_eq!(num.turn_off_bit(28), 0b11110111111111111111111111111111);
        assert_eq!(num.turn_off_bit(29), 0b11101111111111111111111111111111);
        assert_eq!(num.turn_off_bit(30), 0b11011111111111111111111111111111);
        assert_eq!(num.turn_off_bit(31), 0b10111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(32), 0b01111111111111111111111111111111);

        let num: u32 = 0b10011110000010001111111000000000;

        assert_eq!(num.modify_bit(01, T), 0b10011110000010001111111000000001);
        assert_eq!(num.modify_bit(01, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(02, T), 0b10011110000010001111111000000010);
        assert_eq!(num.modify_bit(02, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(03, T), 0b10011110000010001111111000000100);
        assert_eq!(num.modify_bit(03, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(04, T), 0b10011110000010001111111000001000);
        assert_eq!(num.modify_bit(04, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(05, T), 0b10011110000010001111111000010000);
        assert_eq!(num.modify_bit(05, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(06, T), 0b10011110000010001111111000100000);
        assert_eq!(num.modify_bit(06, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(07, T), 0b10011110000010001111111001000000);
        assert_eq!(num.modify_bit(07, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(08, T), 0b10011110000010001111111010000000);
        assert_eq!(num.modify_bit(08, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(09, T), 0b10011110000010001111111100000000);
        assert_eq!(num.modify_bit(09, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(10, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(10, F), 0b10011110000010001111110000000000);

        assert_eq!(num.modify_bit(11, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(11, F), 0b10011110000010001111101000000000);

        assert_eq!(num.modify_bit(12, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(12, F), 0b10011110000010001111011000000000);

        assert_eq!(num.modify_bit(13, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(13, F), 0b10011110000010001110111000000000);

        assert_eq!(num.modify_bit(14, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(14, F), 0b10011110000010001101111000000000);

        assert_eq!(num.modify_bit(15, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(15, F), 0b10011110000010001011111000000000);

        assert_eq!(num.modify_bit(16, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(16, F), 0b10011110000010000111111000000000);

        assert_eq!(num.modify_bit(17, T), 0b10011110000010011111111000000000);
        assert_eq!(num.modify_bit(17, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(18, T), 0b10011110000010101111111000000000);
        assert_eq!(num.modify_bit(18, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(19, T), 0b10011110000011001111111000000000);
        assert_eq!(num.modify_bit(19, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(20, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(20, F), 0b10011110000000001111111000000000);

        assert_eq!(num.modify_bit(21, T), 0b10011110000110001111111000000000);
        assert_eq!(num.modify_bit(21, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(22, T), 0b10011110001010001111111000000000);
        assert_eq!(num.modify_bit(22, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(23, T), 0b10011110010010001111111000000000);
        assert_eq!(num.modify_bit(23, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(24, T), 0b10011110100010001111111000000000);
        assert_eq!(num.modify_bit(24, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(25, T), 0b10011111000010001111111000000000);
        assert_eq!(num.modify_bit(25, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(26, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(26, F), 0b10011100000010001111111000000000);

        assert_eq!(num.modify_bit(27, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(27, F), 0b10011010000010001111111000000000);

        assert_eq!(num.modify_bit(28, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(28, F), 0b10010110000010001111111000000000);

        assert_eq!(num.modify_bit(29, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(29, F), 0b10001110000010001111111000000000);

        assert_eq!(num.modify_bit(30, T), 0b10111110000010001111111000000000);
        assert_eq!(num.modify_bit(30, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(31, T), 0b11011110000010001111111000000000);
        assert_eq!(num.modify_bit(31, F), 0b10011110000010001111111000000000);

        assert_eq!(num.modify_bit(32, T), 0b10011110000010001111111000000000);
        assert_eq!(num.modify_bit(32, F), 0b00011110000010001111111000000000);

    }

    #[test]
    fn test_modify_bit_on_u64() {
        let num: u64 = 0b0000000000000000000000000000000000000000000000000000000000000000;


        assert_eq!(num.turn_on_bit(01), 0b0000000000000000000000000000000000000000000000000000000000000001);
        assert_eq!(num.turn_on_bit(02), 0b0000000000000000000000000000000000000000000000000000000000000010);
        assert_eq!(num.turn_on_bit(03), 0b0000000000000000000000000000000000000000000000000000000000000100);
        assert_eq!(num.turn_on_bit(04), 0b0000000000000000000000000000000000000000000000000000000000001000);
        assert_eq!(num.turn_on_bit(05), 0b0000000000000000000000000000000000000000000000000000000000010000);
        assert_eq!(num.turn_on_bit(06), 0b0000000000000000000000000000000000000000000000000000000000100000);
        assert_eq!(num.turn_on_bit(07), 0b0000000000000000000000000000000000000000000000000000000001000000);
        assert_eq!(num.turn_on_bit(08), 0b0000000000000000000000000000000000000000000000000000000010000000);
        assert_eq!(num.turn_on_bit(09), 0b0000000000000000000000000000000000000000000000000000000100000000);
        assert_eq!(num.turn_on_bit(10), 0b0000000000000000000000000000000000000000000000000000001000000000);
        assert_eq!(num.turn_on_bit(11), 0b0000000000000000000000000000000000000000000000000000010000000000);
        assert_eq!(num.turn_on_bit(12), 0b0000000000000000000000000000000000000000000000000000100000000000);
        assert_eq!(num.turn_on_bit(13), 0b0000000000000000000000000000000000000000000000000001000000000000);
        assert_eq!(num.turn_on_bit(14), 0b0000000000000000000000000000000000000000000000000010000000000000);
        assert_eq!(num.turn_on_bit(15), 0b0000000000000000000000000000000000000000000000000100000000000000);
        assert_eq!(num.turn_on_bit(16), 0b0000000000000000000000000000000000000000000000001000000000000000);
        assert_eq!(num.turn_on_bit(17), 0b0000000000000000000000000000000000000000000000010000000000000000);
        assert_eq!(num.turn_on_bit(18), 0b0000000000000000000000000000000000000000000000100000000000000000);
        assert_eq!(num.turn_on_bit(19), 0b0000000000000000000000000000000000000000000001000000000000000000);
        assert_eq!(num.turn_on_bit(20), 0b0000000000000000000000000000000000000000000010000000000000000000);
        assert_eq!(num.turn_on_bit(21), 0b0000000000000000000000000000000000000000000100000000000000000000);
        assert_eq!(num.turn_on_bit(22), 0b0000000000000000000000000000000000000000001000000000000000000000);
        assert_eq!(num.turn_on_bit(23), 0b0000000000000000000000000000000000000000010000000000000000000000);
        assert_eq!(num.turn_on_bit(24), 0b0000000000000000000000000000000000000000100000000000000000000000);
        assert_eq!(num.turn_on_bit(25), 0b0000000000000000000000000000000000000001000000000000000000000000);
        assert_eq!(num.turn_on_bit(26), 0b0000000000000000000000000000000000000010000000000000000000000000);
        assert_eq!(num.turn_on_bit(27), 0b0000000000000000000000000000000000000100000000000000000000000000);
        assert_eq!(num.turn_on_bit(28), 0b0000000000000000000000000000000000001000000000000000000000000000);
        assert_eq!(num.turn_on_bit(29), 0b0000000000000000000000000000000000010000000000000000000000000000);
        assert_eq!(num.turn_on_bit(30), 0b0000000000000000000000000000000000100000000000000000000000000000);
        assert_eq!(num.turn_on_bit(31), 0b0000000000000000000000000000000001000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(32), 0b0000000000000000000000000000000010000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(33), 0b0000000000000000000000000000000100000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(34), 0b0000000000000000000000000000001000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(35), 0b0000000000000000000000000000010000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(36), 0b0000000000000000000000000000100000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(37), 0b0000000000000000000000000001000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(38), 0b0000000000000000000000000010000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(39), 0b0000000000000000000000000100000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(40), 0b0000000000000000000000001000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(41), 0b0000000000000000000000010000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(42), 0b0000000000000000000000100000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(43), 0b0000000000000000000001000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(44), 0b0000000000000000000010000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(45), 0b0000000000000000000100000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(46), 0b0000000000000000001000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(47), 0b0000000000000000010000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(48), 0b0000000000000000100000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(49), 0b0000000000000001000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(50), 0b0000000000000010000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(51), 0b0000000000000100000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(52), 0b0000000000001000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(53), 0b0000000000010000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(54), 0b0000000000100000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(55), 0b0000000001000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(56), 0b0000000010000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(57), 0b0000000100000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(58), 0b0000001000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(59), 0b0000010000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(60), 0b0000100000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(61), 0b0001000000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(62), 0b0010000000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(63), 0b0100000000000000000000000000000000000000000000000000000000000000);
        assert_eq!(num.turn_on_bit(64), 0b1000000000000000000000000000000000000000000000000000000000000000);

        let num: u64 = 0b1111111111111111111111111111111111111111111111111111111111111111;

        assert_eq!(num.turn_off_bit(01), 0b1111111111111111111111111111111111111111111111111111111111111110);
        assert_eq!(num.turn_off_bit(02), 0b1111111111111111111111111111111111111111111111111111111111111101);
        assert_eq!(num.turn_off_bit(03), 0b1111111111111111111111111111111111111111111111111111111111111011);
        assert_eq!(num.turn_off_bit(04), 0b1111111111111111111111111111111111111111111111111111111111110111);
        assert_eq!(num.turn_off_bit(05), 0b1111111111111111111111111111111111111111111111111111111111101111);
        assert_eq!(num.turn_off_bit(06), 0b1111111111111111111111111111111111111111111111111111111111011111);
        assert_eq!(num.turn_off_bit(07), 0b1111111111111111111111111111111111111111111111111111111110111111);
        assert_eq!(num.turn_off_bit(08), 0b1111111111111111111111111111111111111111111111111111111101111111);
        assert_eq!(num.turn_off_bit(09), 0b1111111111111111111111111111111111111111111111111111111011111111);
        assert_eq!(num.turn_off_bit(10), 0b1111111111111111111111111111111111111111111111111111110111111111);
        assert_eq!(num.turn_off_bit(11), 0b1111111111111111111111111111111111111111111111111111101111111111);
        assert_eq!(num.turn_off_bit(12), 0b1111111111111111111111111111111111111111111111111111011111111111);
        assert_eq!(num.turn_off_bit(13), 0b1111111111111111111111111111111111111111111111111110111111111111);
        assert_eq!(num.turn_off_bit(14), 0b1111111111111111111111111111111111111111111111111101111111111111);
        assert_eq!(num.turn_off_bit(15), 0b1111111111111111111111111111111111111111111111111011111111111111);
        assert_eq!(num.turn_off_bit(16), 0b1111111111111111111111111111111111111111111111110111111111111111);
        assert_eq!(num.turn_off_bit(17), 0b1111111111111111111111111111111111111111111111101111111111111111);
        assert_eq!(num.turn_off_bit(18), 0b1111111111111111111111111111111111111111111111011111111111111111);
        assert_eq!(num.turn_off_bit(19), 0b1111111111111111111111111111111111111111111110111111111111111111);
        assert_eq!(num.turn_off_bit(20), 0b1111111111111111111111111111111111111111111101111111111111111111);
        assert_eq!(num.turn_off_bit(21), 0b1111111111111111111111111111111111111111111011111111111111111111);
        assert_eq!(num.turn_off_bit(22), 0b1111111111111111111111111111111111111111110111111111111111111111);
        assert_eq!(num.turn_off_bit(23), 0b1111111111111111111111111111111111111111101111111111111111111111);
        assert_eq!(num.turn_off_bit(24), 0b1111111111111111111111111111111111111111011111111111111111111111);
        assert_eq!(num.turn_off_bit(25), 0b1111111111111111111111111111111111111110111111111111111111111111);
        assert_eq!(num.turn_off_bit(26), 0b1111111111111111111111111111111111111101111111111111111111111111);
        assert_eq!(num.turn_off_bit(27), 0b1111111111111111111111111111111111111011111111111111111111111111);
        assert_eq!(num.turn_off_bit(28), 0b1111111111111111111111111111111111110111111111111111111111111111);
        assert_eq!(num.turn_off_bit(29), 0b1111111111111111111111111111111111101111111111111111111111111111);
        assert_eq!(num.turn_off_bit(30), 0b1111111111111111111111111111111111011111111111111111111111111111);
        assert_eq!(num.turn_off_bit(31), 0b1111111111111111111111111111111110111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(32), 0b1111111111111111111111111111111101111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(33), 0b1111111111111111111111111111111011111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(34), 0b1111111111111111111111111111110111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(35), 0b1111111111111111111111111111101111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(36), 0b1111111111111111111111111111011111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(37), 0b1111111111111111111111111110111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(38), 0b1111111111111111111111111101111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(39), 0b1111111111111111111111111011111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(40), 0b1111111111111111111111110111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(41), 0b1111111111111111111111101111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(42), 0b1111111111111111111111011111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(43), 0b1111111111111111111110111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(44), 0b1111111111111111111101111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(45), 0b1111111111111111111011111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(46), 0b1111111111111111110111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(47), 0b1111111111111111101111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(48), 0b1111111111111111011111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(49), 0b1111111111111110111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(50), 0b1111111111111101111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(51), 0b1111111111111011111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(52), 0b1111111111110111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(53), 0b1111111111101111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(54), 0b1111111111011111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(55), 0b1111111110111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(56), 0b1111111101111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(57), 0b1111111011111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(58), 0b1111110111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(59), 0b1111101111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(60), 0b1111011111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(61), 0b1110111111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(62), 0b1101111111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(63), 0b1011111111111111111111111111111111111111111111111111111111111111);
        assert_eq!(num.turn_off_bit(64), 0b0111111111111111111111111111111111111111111111111111111111111111);

        let num: u64 = 0b1001111000001000100000010000100110100001111111110000000000000000;

        assert_eq!(num.modify_bit(01, T), 0b1001111000001000100000010000100110100001111111110000000000000001);
        assert_eq!(num.modify_bit(01, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(02, T), 0b1001111000001000100000010000100110100001111111110000000000000010);
        assert_eq!(num.modify_bit(02, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(03, T), 0b1001111000001000100000010000100110100001111111110000000000000100);
        assert_eq!(num.modify_bit(03, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(04, T), 0b1001111000001000100000010000100110100001111111110000000000001000);
        assert_eq!(num.modify_bit(04, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(05, T), 0b1001111000001000100000010000100110100001111111110000000000010000);
        assert_eq!(num.modify_bit(05, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(06, T), 0b1001111000001000100000010000100110100001111111110000000000100000);
        assert_eq!(num.modify_bit(06, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(07, T), 0b1001111000001000100000010000100110100001111111110000000001000000);
        assert_eq!(num.modify_bit(07, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(08, T), 0b1001111000001000100000010000100110100001111111110000000010000000);
        assert_eq!(num.modify_bit(08, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(09, T), 0b1001111000001000100000010000100110100001111111110000000100000000);
        assert_eq!(num.modify_bit(09, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(10, T), 0b1001111000001000100000010000100110100001111111110000001000000000);
        assert_eq!(num.modify_bit(10, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(11, T), 0b1001111000001000100000010000100110100001111111110000010000000000);
        assert_eq!(num.modify_bit(11, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(12, T), 0b1001111000001000100000010000100110100001111111110000100000000000);
        assert_eq!(num.modify_bit(12, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(13, T), 0b1001111000001000100000010000100110100001111111110001000000000000);
        assert_eq!(num.modify_bit(13, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(14, T), 0b1001111000001000100000010000100110100001111111110010000000000000);
        assert_eq!(num.modify_bit(14, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(15, T), 0b1001111000001000100000010000100110100001111111110100000000000000);
        assert_eq!(num.modify_bit(15, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(16, T), 0b1001111000001000100000010000100110100001111111111000000000000000);
        assert_eq!(num.modify_bit(16, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(17, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(17, F), 0b1001111000001000100000010000100110100001111111100000000000000000);

        assert_eq!(num.modify_bit(18, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(18, F), 0b1001111000001000100000010000100110100001111111010000000000000000);

        assert_eq!(num.modify_bit(19, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(19, F), 0b1001111000001000100000010000100110100001111110110000000000000000);

        assert_eq!(num.modify_bit(20, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(20, F), 0b1001111000001000100000010000100110100001111101110000000000000000);

        assert_eq!(num.modify_bit(21, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(21, F), 0b1001111000001000100000010000100110100001111011110000000000000000);

        assert_eq!(num.modify_bit(22, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(22, F), 0b1001111000001000100000010000100110100001110111110000000000000000);

        assert_eq!(num.modify_bit(23, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(23, F), 0b1001111000001000100000010000100110100001101111110000000000000000);

        assert_eq!(num.modify_bit(24, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(24, F), 0b1001111000001000100000010000100110100001011111110000000000000000);

        assert_eq!(num.modify_bit(25, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(25, F), 0b1001111000001000100000010000100110100000111111110000000000000000);

        assert_eq!(num.modify_bit(26, T), 0b1001111000001000100000010000100110100011111111110000000000000000);
        assert_eq!(num.modify_bit(26, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(27, T), 0b1001111000001000100000010000100110100101111111110000000000000000);
        assert_eq!(num.modify_bit(27, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(28, T), 0b1001111000001000100000010000100110101001111111110000000000000000);
        assert_eq!(num.modify_bit(28, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(29, T), 0b1001111000001000100000010000100110110001111111110000000000000000);
        assert_eq!(num.modify_bit(29, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(30, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(30, F), 0b1001111000001000100000010000100110000001111111110000000000000000);

        assert_eq!(num.modify_bit(31, T), 0b1001111000001000100000010000100111100001111111110000000000000000);
        assert_eq!(num.modify_bit(31, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(32, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(32, F), 0b1001111000001000100000010000100100100001111111110000000000000000);

        assert_eq!(num.modify_bit(33, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(33, F), 0b1001111000001000100000010000100010100001111111110000000000000000);

        assert_eq!(num.modify_bit(34, T), 0b1001111000001000100000010000101110100001111111110000000000000000);
        assert_eq!(num.modify_bit(34, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(35, T), 0b1001111000001000100000010000110110100001111111110000000000000000);
        assert_eq!(num.modify_bit(35, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(36, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(36, F), 0b1001111000001000100000010000000110100001111111110000000000000000);

        assert_eq!(num.modify_bit(37, T), 0b1001111000001000100000010001100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(37, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(38, T), 0b1001111000001000100000010010100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(38, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(39, T), 0b1001111000001000100000010100100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(39, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(40, T), 0b1001111000001000100000011000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(40, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(41, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(41, F), 0b1001111000001000100000000000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(42, T), 0b1001111000001000100000110000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(42, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(43, T), 0b1001111000001000100001010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(43, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(44, T), 0b1001111000001000100010010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(44, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(45, T), 0b1001111000001000100100010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(45, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(46, T), 0b1001111000001000101000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(46, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(47, T), 0b1001111000001000110000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(47, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(48, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(48, F), 0b1001111000001000000000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(49, T), 0b1001111000001001100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(49, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(50, T), 0b1001111000001010100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(50, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(51, T), 0b1001111000001100100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(51, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(52, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(52, F), 0b1001111000000000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(53, T), 0b1001111000011000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(53, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(54, T), 0b1001111000101000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(54, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(55, T), 0b1001111001001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(55, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(56, T), 0b1001111010001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(56, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(57, T), 0b1001111100001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(57, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(58, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(58, F), 0b1001110000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(59, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(59, F), 0b1001101000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(60, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(60, F), 0b1001011000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(61, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(61, F), 0b1000111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(62, T), 0b1011111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(62, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(63, T), 0b1101111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(63, F), 0b1001111000001000100000010000100110100001111111110000000000000000);

        assert_eq!(num.modify_bit(64, T), 0b1001111000001000100000010000100110100001111111110000000000000000);
        assert_eq!(num.modify_bit(64, F), 0b0001111000001000100000010000100110100001111111110000000000000000);

    }

    #[test]
    fn test_toggle_bit_on_u8() {
        let num: u8 = 0b00000000;

        assert_eq!(num.toggle_bit(01), 0b00000001);
        assert_eq!(num.toggle_bit(02), 0b00000010);
        assert_eq!(num.toggle_bit(03), 0b00000100);
        assert_eq!(num.toggle_bit(04), 0b00001000);
        assert_eq!(num.toggle_bit(05), 0b00010000);
        assert_eq!(num.toggle_bit(06), 0b00100000);
        assert_eq!(num.toggle_bit(07), 0b01000000);
        assert_eq!(num.toggle_bit(08), 0b10000000);

        let num: u8 = 0b11111111;

        assert_eq!(num.toggle_bit(01), 0b11111110);
        assert_eq!(num.toggle_bit(02), 0b11111101);
        assert_eq!(num.toggle_bit(03), 0b11111011);
        assert_eq!(num.toggle_bit(04), 0b11110111);
        assert_eq!(num.toggle_bit(05), 0b11101111);
        assert_eq!(num.toggle_bit(06), 0b11011111);
        assert_eq!(num.toggle_bit(07), 0b10111111);
        assert_eq!(num.toggle_bit(08), 0b01111111);

        let num: u8 = 0b10110010;

        assert_eq!(num.toggle_bit(01), 0b10110011);
        assert_eq!(num.toggle_bit(02), 0b10110000);
        assert_eq!(num.toggle_bit(03), 0b10110110);
        assert_eq!(num.toggle_bit(04), 0b10111010);
        assert_eq!(num.toggle_bit(05), 0b10100010);
        assert_eq!(num.toggle_bit(06), 0b10010010);
        assert_eq!(num.toggle_bit(07), 0b11110010);
        assert_eq!(num.toggle_bit(08), 0b00110010);
    }

}
